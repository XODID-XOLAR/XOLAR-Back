# This is a basic workflow to help you get started with Actions

name: Deploy to Amazon EC2
# Controls when the workflow will run

# Workflow를 트리거하는 이벤트 지정
# 이 코드는 develop 브랜치에 push할 때 Workflow 실행
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["develop"]

# Workflow 내에서 사용하는 환경변수 정의
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: xolar-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: xolar-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: xolar-codedeploy-deployment-group

permissions:
  contents: read

# Workflow는 한 개 이상의 job으로 구성됨
# runs-on으로 실행할 환경 지정  
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    
    # 접근 가능하도록 저장소를 checkout
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # GitHub Secrets에 추가한 APPLICATION_YML로 application.yml 생성
      - name: make application.yml
        run: |
          mkdir ./xolar/src/main/resources
          cd ./xolar/src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
      
      # build    
      - name: Build with Gradle
        run: |
          cd ./xolar  # Gradle build 파일이 위치한 경로로 이동
          chmod +x ./gradlew
          ./gradlew build -x test
      
      # GitHub Secrets에 추가한 액세스 키 값으로 AWS 사용자 인증    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.AWS_REGION }}
      
      # CodeDeploy의 데이터를 압축하여 S3에 업로드    
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source ./xolar
      
      # S3에 업로드된 애플리케이션 배포      
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
